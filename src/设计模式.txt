单粒设计模式：确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。
https://github.com/sren911/test2.git1
单粒模式的优点
    1：在内存中只有一个实例，减少内存开支，当一个对象需要频繁的创建、销毁时，而且创建销毁性能又无法优化，单粒模式的优势非常明显。
    2：单粒模式只有一个实例，减少系统性能的开销，当一个对象的产生需要比较多的资源时，如对去配置、产生其他依赖对象时，采用该模式
    3：单例模式可以避免对资源的多重占用，例如一个写文件动作，由于只有一个实例存在内存中，避免对同一个资源文件的同时写操作
    4：单例模式可以在系统设置全局的访问点，优化和共享资源访问，例如可以设计一个单例类，负责所有数据表的映射处理。
单粒模式的缺点
    1：没有接口，扩展困难
    2：对测试不利
    3：与单一职责原则有冲突
单粒模式的使用场景
    1：要求生成唯一序列号的环境
    2：在整个项目中需要一个共享访问点或共享数据，例如一个Web页面上的计数器，可以不用把每次刷新都记录到数据库中，使用单例模式保持计数器的值，并确保是线程安全的
    3：创建一个对象需要消耗过多的资源，如访问IO或数据库
    4：需要定义大量的静态常量和静态方法（如工具类）的环境

工厂模式的定义：定义一个用于创建对象的接口，让子类决定实例化哪一个类。
工厂模式的优点：
    1：良好的封装性，代码结构清晰。
    2：扩展性好，
    3：屏蔽产品类，例如JDBC连接不同的数据库
工厂方法模式的使用场景：
    1：工厂方法模式是new一个对象的替代品，所以在所有需要生成对象的地方都可以使用，但是需要慎重地考虑是否要增加一个工厂类进行管理，增加代码的复杂度。
    2：需要灵活的、可扩展的框架时，可以考虑采用工厂方法模式。

工厂方法模式的扩展：
    1：工厂方法模式的扩展，一个模块仅需要一个工厂类，没有必要把它产生出来，使用静态的方法就可以了（静态工厂模式）
    2: 多个工厂类
    3：替代单例模式



代理模式定义：为其他对象提供一种代理以控制对这个对象的访问
代理模式的优点：
    1：职责清晰，真实的角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，附带的结果就是编程简洁清晰
    2：高扩展性：具体主题角色是随时都会发生变化的，只要它实现了接口，甭管它如何变化，都逃不脱如来佛的手掌（接口），那我们的代理类完全就可以在不做任何修改的情况下使用。
    3：高智能化：


原型模式：用原型实例指定创建对象的种类，并且通过拷贝原型创建新的对象。
原型模型有点：
    1：性能优良，在内存中是二进制数据流拷贝，比new对象性能好
    2：逃避构造函数的约束，在内存中拷贝，构造函数不会执行。
